{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Sun Group Handbook","text":"<p>This handbook serves as documentation for commonly used computational resources for the Sun Research Group at the University of Michigan - Ann Arbor.</p> Diagram of thermodynamic surface from Maxwell's book Theory of Heat. <p>Classical thermodynamics is the only physical theory of universal content which I am convinced will never be overthrown. - Albert Einstein</p>"},{"location":"contributing/how_to_contribute/","title":"How to Contribute","text":"<p>Thank you for your interest in contributing to this documentation page! Here we'll walk through the necessary steps needed to contribute to the project.</p>"},{"location":"contributing/how_to_contribute/#clone-the-repository","title":"Clone the Repository","text":"<p>First, you'll want to clone the repository.</p> SSHHTTPS Bash<pre><code>git clone git@github.com:nrdavid/whsun-docs.git\n</code></pre> Bash<pre><code>git clone https://github.com/nrdavid/whsun-docs.git\n</code></pre>"},{"location":"contributing/how_to_contribute/#creating-a-new-branch","title":"Creating a new branch","text":"<p>Once you've cloned the repository, you can create a new branch with the topic you'd like to contribute with. For example, I'm adding a section on \"How to contribute\" so maybe I'd name my branch \"contributing\". This will create the new branch and enter it.</p> Bash<pre><code>git checkout -b &lt;BRANCH_NAME&gt;\n</code></pre> <p>Set your upstream for the branch.</p> Bash<pre><code>git branch --set-upstream-to=origin/&lt;BRANCH_NAME&gt;  &lt;BRANCH_NAME&gt;\n</code></pre> <p>Then push you branch to the remote <code>git push</code>.</p>"},{"location":"contributing/how_to_contribute/#making-your-changes","title":"Making your changes","text":"<p>To add your section to the navigation bar, go to <code>mkdocs.yml</code> and add your section to the <code>nav</code> tree. You will also need to create a new markdown file (and folder if necessary).</p> <p>NO OTHER PORTION OF <code>mkdocs.yml</code> SHOULD BE MODIFIED</p> <p>You should also follow the conventions laid out in other sections like adding a <code>imgs</code> folder for you images.</p> Adding your section to the <code>nav</code> tree."},{"location":"contributing/how_to_contribute/#commit-push-and-pr","title":"Commit, Push, and PR","text":"<p>Once your changes are done, add, commit, pull, rebase, and push them to the remote. Please make your messages meaningful.</p> <p>Pull the latest changes and rebase your changes to <code>main</code> to create an easier pull request.</p> Bash<pre><code>git checkout main \ngit pull\n</code></pre> Bash<pre><code>git checkout &lt;BRANCH_NAME&gt;\ngit rebase main &lt;BRANCH_NAME&gt;\n</code></pre> <p>You may need to resolve some conflicts between your branch and <code>main</code>. </p> <p>After that, go to the repository online and create a pull request to main. @nrdavid will then review the request!</p>"},{"location":"contributing/how_to_contribute/#post-pr-approval","title":"Post PR approval","text":"<p>After your PR has been approved and merged into <code>main</code>, you should clean up your branch if you're no longer using it.</p> Bash<pre><code>git push -d origin &lt;BRANCH_NAME&gt;\n</code></pre> Bash<pre><code>git branch -D &lt;BRANCH_NAME&gt;\n</code></pre> <p>Lastly, you should pull the recent changes from <code>main</code> into your local.</p> <p>That's it. Thank you!</p>"},{"location":"getting_started/setup/","title":"Setup","text":""},{"location":"getting_started/setup/#overview","title":"Overview","text":"<p>This tutorial will get you started with basic python programming using conda for environment management and Visual Studio Code as an integrated development environment (IDE).</p>"},{"location":"getting_started/setup/#windows-subsystem-for-linux","title":"Windows Subsystem for Linux","text":"<p>If you're developing on Windows, it is recommended that you first install Windows Subsystem for Linux (WSL) on your machine. WSL is a virtualization software that lets developers install a Linux distribution (such as Ubuntu, OpenSUSE, Kali, Debian, Arch Linux, etc) and use Linux applications, utilities, and Bash command-line tools directly on Windows, unmodified, without the overhead of a traditional virtual machine or dualboot setup.</p> <p>To setup, follow the instructions below:</p> <ol> <li>Open PowerShell in administrator mode by right-clicking and selection \"Run as administrator\".</li> <li>Install wsl with the default Ubuntu distribution and follow the directions on screen. It may ask you to set a username and password for your unix subsystem account. PowerShell<pre><code>wsl --install\n</code></pre></li> <li>Now you should be able to invoke WSL from the shell simply by typing PowerShell<pre><code>wsl\n</code></pre></li> </ol> <p>To exit wsl simply type <code>exit</code>.</p>"},{"location":"getting_started/setup/#installing-conda","title":"Installing Conda","text":"<p>Conda is an environment manager frequently used with Python. There are a few different installers, but we'll specifically be looking at Miniconda, a free minimal installer for conda.</p> <p>Navigate to your home directory <code>cd ~</code> and copy and paste the following.</p> Bash<pre><code>mkdir -p ~/miniconda3\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh\nbash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\nrm ~/miniconda3/miniconda.sh\n</code></pre> <p>To initialize conda run:</p> Bash<pre><code>~/miniconda3/bin/conda init bash\n~/miniconda3/bin/conda init zsh\n</code></pre> <p>You may need to restart your shell in order for the changes to take effect.</p> Tip - Mamba Solver <p>Solving environments with the default solver in conda can be slow. It's suggested that you chnage the solver to mamba which acts as a drop in replacement. To use the new solver, update conda in your base environment: Bash<pre><code>conda update -n base conda\n</code></pre> To install and set the new solver, run the following commands: Bash<pre><code>conda install -n base conda-libmamba-solver\nconda config --set solver libmamba\n</code></pre> Read more about it here. Now solving environments will be faster without any changes.</p>"},{"location":"getting_started/setup/#creating-a-new-environment","title":"Creating a new environment","text":"<p>Conda environments should be created whenever starting a new project. To make one with the latest stable release of python type:</p> <p>Bash<pre><code>conda create -n myenv python\n</code></pre> <code>-n myenv</code> instructs conda to name your environment 'myenv' and <code>python</code> installs python and all of it's core dependencies in the new environment. To enter or exit the environment, use the commands below.</p> ActivateDeactivate Bash<pre><code>conda activate myenv\n</code></pre> Bash<pre><code>conda deactivate\n</code></pre>"},{"location":"getting_started/setup/#using-visual-studio-code","title":"Using Visual Studio Code","text":"<p>Download and install Visual Studio Code. Follow the installation instructions for your OS. VS Code is a lightweight IDE used for a variety of langauges. Once installed open VS Code and navigate to the \"Extensions\" tab (1). Search the marketplace for the \"Python\" extension and install. With this extension VS Code will be able to recognize Python, giving you meaningful feedback from the IDE when writing your code.</p> <ol> <li>VS Code extensions are what makes VS Code more than just a text editor. Take some time to explore the extensions     marketplace to increase your productivity as a programmer.</li> </ol> Tip - shortcut to open VS Code <p>quickly open VSCode by typing <code>code .</code> in the command line:</p> <p>Now locate the \"New File\" option in VS Code to create a new file. Then save it as a <code>.py</code> file to tell VS Code that this file is a python script. Now in VS Code open a \"New Terminal\" using the toolbar. From here you should have opened a new interactive shell within VS Code. Now activate your conda environment and type <code>python filename.py</code> to run your script (make sure your in the same directory as your saved python file).</p> Getting Python setup in VS Code. <p>you can also press the play icon in the upper right hand corner of the VS code window. </p> Running a python file in VS Code. <p>At this point it's also a good idea to open the Command Palette to tell VS Code (and Pylance) which Python interpreter to point to. This will allow VS Code to properly identify which packages you have installed and which you do not. Use \u21e7\u2318P (Mac) or <code>Ctrl+Shift+P</code> (Windows). Then type <code>Python: Select Interpreter</code> and select the option. From here you should see all your available global environments. Choose the one you've setup and are using.</p> Tip - set VS Code to autosave <p>You can set VS Code to autosave files as you make changes by selecting File -&gt; Autosave </p> Warning - WSL Users <p> Since WSL acts like a VM, you will first need to \"Open a Remote Window\" to WSL inside VS Code in order to access your environment. In the bottom left of VS Code there are two staggered chevrons facing towards each other inside of a blue ribbon. Click this and a popup will appear. Select \"Connect to WSL\" to start the connection.</p> Note - Settings Sync <p>Settings Sync allows VS Code to share your configurations like extensions, shortcuts, etc. across devices when signed in. You can follow the instructions here to set up Settings Sync. It is recommended that you sign in with your GitHub credentials (1).</p> <p>VS Code does not synchronize your extensions to or from a remote window, such as when you're connected to SSH, a development container (devcontainer), or WSL.</p> <ol> <li>If you do not have a GitHub you can create one here. It is also a good idea to join GitHub Education which will give you access to premium features such as GitHub Copilot .</li> </ol>"},{"location":"getting_started/volcano_plot/","title":"Volcano Plot","text":""},{"location":"getting_started/volcano_plot/#overview","title":"Overview","text":"<p>Welcome! This guide will teach you how to get started with Python and The Materials Project API. The Materials Project is a powerful database providing access to over 140,000 unique materials. These materials along with a plethora of their properties were calculated ab-initio, or from first principles. Many of these calculations are driven by high-throughput density-functional theory (DFT). Given only a materials crystal structure, DFT can calculate a variety of different materials properties. By the end of this guide you'll have learned to (1) run Python scripts, (2) connect to the Materials Project API, and (3) plot in matplotlib. This will be done by creating what we like to call \"The Volcano Plot\" from the paper, \"A map of the inorganic ternary metal nitrides\", by Wenhao Sun et al.</p> The Volcano plot."},{"location":"getting_started/volcano_plot/#connecting-to-the-materials-project-api","title":"Connecting to the Materials Project API","text":"<p>The Materials Project allows anyone to have direct access to current, most up-to-date information for the Materials Project database through their application programming interface (API).</p>"},{"location":"getting_started/volcano_plot/#getting-a-key","title":"Getting a Key","text":"<p>Go to the  Materials Project API and create an account to acquire a key. This key is your API access to their database. Keep track of this.</p>"},{"location":"getting_started/volcano_plot/#connecting-to-the-api","title":"Connecting to the API","text":"<p>Since you've created a new conda environment, you'll need to install the required packages in order to connect to the Materials Project API. This can be done via <code>conda install &lt;package name&gt;</code>. In your environment type:</p> <p><code>conda install mp-api</code></p> <p>into your terminal. After doing open a new python file and run the following code:</p> <p>Python<pre><code># Testing connectivity to API by grabbing data for \"mp-149\"\nfrom mp_api import MPRester\nwith MPRester(api_key=YOUR_KEY) as mpr:\n    doc = mpr.summary.get_data_by_id(\"mp-149\")\n</code></pre> If the code above executes with no errors, you're all set!</p>"},{"location":"getting_started/volcano_plot/#completing-the-onboarding-assignment","title":"Completing the Onboarding Assignment","text":"<p>Now you have all the necessary ground work to produce the volcano plot! The next steps are entirely up to you, but I would recommend following the ordered list below.</p> <ol> <li>Read \"A map of the inorganic ternary metal nitrides\", by Wenhao Sun et al.</li> <li>Read the Materials Project API Docs and play around with the API functionality.</li> <li>Acquire the data needed to create the volcano plot.</li> <li>Familiarize yourself with matplotlib, then make the plot! Note: The plot may look slightly different from API changes over the years.</li> </ol> <p>Lastly, good luck!</p>"},{"location":"programming/asynchrony/","title":"Asynchrony","text":""},{"location":"programming/asynchrony/#overview","title":"Overview","text":"<p>This tutorial will introduce the concept of asynchrony in programming. It will also provide some Python examples on how to do this practically.</p>"},{"location":"programming/asynchrony/#what-is-asynchrony","title":"What is asynchrony?","text":"<p>From the first paragraph of Wikipedia on the topic:</p> <p>Asynchrony, in computer programming, refers to the occurrence of events independent of the main program flow and ways to deal with such events. These may be \"outside\" events such as the arrival of signals, or actions instigated by a program that take place concurrently with program execution, without the program hanging to wait for results. Asynchronous input/output is an example of the latter case of asynchrony, and lets programs issue commands to storage or network devices that service these requests while the processor continues executing the program. Doing so provides a degree of parallelism. - Wikipedia</p> <p>The key idea here is that with asynchrony we have a way of distributing tasks in way such that we prevent blocking the main loop of our program. This is especially useful for when a subroutine relies on responses from another operation that takes place outside of our main loop.</p> <p>For example, say we are doing some data mining, sending requests to an API. In traditional synchronous programming, we would send request 1, wait for response 1, then send request 2, and wait for response 2. What if, response 2 is significantly smaller in size or uses a different endpoint that is faster than the endpoint used in request 1? Rather than waiting for response 1, consequently blocking the main loop of our routine, we'd want to grab response 2 while we wait and possibly do some other operations.</p> <p>A common way for dealing with asynchrony in a programming interface is to provide subroutines that return a future or promise that represents the ongoing operation, and a synchronizing operation that blocks until the future or promise is completed. - Wikipedia</p> A diagram demonstrating the difference between synchronous and asynchronous requests."},{"location":"programming/asynchrony/#asyncio","title":"Asyncio","text":"<p>The Python Standard Library provides a package for doing this easily called asyncio. We will look at a couple basic examples of using asyncio. Credits to realpython for some inspiration for the examples.</p> AsynchronousSynchronous Python<pre><code># count_async.py\n\nimport asyncio, time\n\nasync def count(): # (1)!\n    print(\"One\")\n    # mimics some operation\n    await asyncio.sleep(1) # (2)!\n    print(\"Two\")\n\nasync def main():\n    tasks = [count(), count(), count()]\n    await asyncio.gather(*tasks) # (3)!\n\nif __name__ == \"__main__\":\n    s = time.perf_counter()\n    asyncio.run(main()) # (4)!\n    elapsed = time.perf_counter() - s\n    print(f\"{__file__} executed in {elapsed:0.2f} seconds.\")\n</code></pre> <ol> <li>Notice the <code>async</code> keyword here. It denotes that the function is an asynchronous routine.</li> <li>Notice the <code>await</code> keyword here. This suspends the execution of the coroutine until the awaitable it takes completes and returns a result.</li> <li><code>gather</code> runs awaitable objects in the tasks sequence concurrently.</li> <li><code>run</code> executes the coroutine main and returns the result.</li> </ol> Python<pre><code># count_sync.py\n\nimport time\n\ndef count():\n    print(\"One\")\n    time.sleep(1)\n    print(\"Two\")\n\ndef main():\n    for _ in range(3):\n        count()\n\nif __name__ == \"__main__\":\n    s = time.perf_counter()\n    main()\n    elapsed = time.perf_counter() - s\n    print(f\"{__file__} executed in {elapsed:0.2f} seconds.\")\n</code></pre> <p>The output looks like the following. Notice the time difference between the two routines.</p> AsynchronousSynchronous Bash<pre><code>$ python count_async.py\nOne\nOne\nOne\nTwo\nTwo\nTwo\ncount_async.py executed in 1.00 seconds.\n</code></pre> Bash<pre><code>$ python count_sync.py\nOne\nTwo\nOne\nTwo\nOne\nTwo\ncount_sync.py executed in 3.00 seconds.\n</code></pre> <p>The asynchronous routine will yield back to the main event loop as it <code>await</code>s the return value from the subroutine <code>sleep</code>. This will allow the other <code>count()</code> tasks to start running concurrently. In the traditional synchronous case, the main event loop is halted by <code>sleep</code> and subsequently the completion of <code>count()</code> before it can start the next task.</p>"},{"location":"programming/email_upon_completion/","title":"Email Upon Completion","text":"<p>If you don't have the luxury of running your long programs on supercomputers with access to workload managers like Slurm and you don't have superuser (<code>sudo</code>) access, then this tutorial is for you.</p>"},{"location":"programming/email_upon_completion/#overview","title":"Overview","text":"<p>In this tutorial, you will learn how to have a remote server send you an email when your code terminates by just using <code>curl</code>.</p>"},{"location":"programming/email_upon_completion/#gmail-app-passwords","title":"GMail App Passwords","text":"<p>Since this tool will function as an applicaton, we first need to create a secure key code to allow our GMail account to automatically send emails. Visit App passwords, log into your account and create a new App password. Record this key value for later.</p>"},{"location":"programming/email_upon_completion/#inserting-into-your-bash-script","title":"Inserting into your bash script","text":"<p>Using your GMail app, we can insert the curl command below at the end of any batch script to send us an email when our script terminates.</p> Bash<pre><code>#!/bin/bash\n\n# Some script that runs for a long time\npython foo.py\n\n# Wait for all background processes to finish\nwait\n\n# Send email \ncurl --url 'smtps://smtp.gmail.com:465' --ssl-reqd \\\n  --mail-from 'sender@gmail.com' \\ # (1)!\n  --mail-rcpt 'recipient@umich.edu' \\ # (2)!\n  --user 'sender@gmail.com:YOUR_APP_PASSWORD' \\ # (3)!\n  -T &lt;(echo -e 'From: sender@gmail.com\\nTo: recipient@umich.edu\\nSubject: Server Automatic\\n\\nCode done!') # (4)!\n</code></pre> <ol> <li>The email used to create the app password (i.e. the sender)</li> <li>The recepient (can be anyone).</li> <li>Place your app password after the colon</li> <li>Subject: Server Automatic. Body: Code done!</li> </ol> Tip <p>Remember that in order to execute a bash script you must first add execute permissions to bash script. Bash<pre><code>chmod +x &lt;filename&gt;\n</code></pre> To run the script as a background process, you can insert the <code>&amp;</code> after the execution. Bash<pre><code>./filename &amp;\n</code></pre></p>"},{"location":"programming/embarrasingly_parallel/","title":"Embarrassingly Parallel","text":""},{"location":"programming/embarrasingly_parallel/#overview","title":"Overview","text":"<p>In this tutorial we will cover concurrency and (embarassingly) parallel programs. We will provide a high-level overview of each and some basic example scripts involving each.</p>"},{"location":"programming/embarrasingly_parallel/#asyncio-threading-and-multiprocessing","title":"Asyncio, threading, and multiprocessing","text":"<p>In another tutorial we covered asyncio in Python; Here, we will cover the threading and multiprocessing libraries in Python. To the naive programmer, all of these libraries seem pretty similar and rightfully so. Below is table that describes when we should use each library.</p> Library Use Case Best For Example Scenarios <code>asyncio</code> Asynchronous I/O operations, many waiting operations I/O-bound tasks, cooperative multitasking Networking, web scraping, file I/O <code>threading</code> Concurrent tasks with shared memory I/O-bound tasks with parallelism needed Web servers, user interface applications <code>multiprocessing</code> CPU-bound tasks with no shared memory CPU intensive tasks Data processing, machine learning, image processing"},{"location":"programming/embarrasingly_parallel/#concurrency","title":"Concurrency","text":"<p>Concurrency is the ability for tasks in program or algorithm to be executed during overlapping time periods rather than purely sequentially. In these programs, the CPU core switches between \"tasks\" (i.e. threads) without necessarily completing each one after switching. This enables programs to execute more efficiently even on single-threaded, single core CPUs.</p> <p>The Python Standard Library provides a module named <code>threading</code> that allows us to build programs with concurrency. Let's analyze the following program.</p> CodeOutput Python<pre><code>import threading, time\n\ndef foo(snooze: float):\n    print('start foo')\n    time.sleep(snooze) # (1)!\n    print('end foo')\n\ndef bar(snooze: float):\n    print('start bar')\n    time.sleep(snooze)\n    print('end bar')\n\ndef main():\n    x = threading.Thread(target=foo, args=(1,)) # (2)!\n    y = threading.Thread(target=bar, args=(2,))\n    x.start() # (3)!\n    y.start()\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    main()\n    finish_time = time.time()\n    print(f\"Finished in: {finish_time - start_time:.2f} seconds\")\n</code></pre> <ol> <li><code>sleep</code> used to simulate some operation.</li> <li><code>target</code> specifies the function and <code>args</code> is a tuple with the function arguments.</li> <li><code>start</code> used to start a thread.</li> </ol> Bash<pre><code>$ python test.py\nstart foo\nstart bar\nFinished in: 0.00 seconds\nend foo\nend bar\n</code></pre> <p>Finished in 0.00 seconds? That was quick! Did the program really terminate here? No. Since both functions were halted with the sleep function, the CPU decided to keep working on the main thread. Then when each function was done, <code>foo</code> then <code>bar</code> it terminated the program.</p> <p>If we want to halt the main thread and add some level of synchronization, we can wait for the threads to finish first with the <code>join()</code> function.</p> CodeOutput Python<pre><code>import threading, time\n\ndef foo(snooze: float):\n    print('start foo')\n    time.sleep(snooze)\n    print('end foo')\n\ndef bar(snooze: float):\n    print('start bar')\n    time.sleep(snooze)\n    print('end bar')\n\ndef main():\n    x = threading.Thread(target=foo, args=(1,))\n    y = threading.Thread(target=bar, args=(2,))\n    x.start()\n    y.start()\n    x.join() # (1)!\n    y.join()\nif __name__ == \"__main__\":\n    start_time = time.time()\n    main()\n    finish_time = time.time()\n    print(f\"Finished in: {finish_time - start_time:.2f} seconds\")\n</code></pre> <ol> <li>Notice the <code>join()</code> function calls added here.</li> </ol> Bash<pre><code>$ python test.py\nstart foo\nstart bar\nend foo\nend bar\nFinished in: 2.00 seconds\n</code></pre> <p>Now our code finishes in 2.00 seconds as expected. If we make <code>y</code> the slowest task by passing a <code>snooze</code> value of 0.5, we get the following output.</p> Bash<pre><code>$ python test.py\nstart foo\nstart bar\nend bar\nend foo\nFinished in: 1.00 seconds\n</code></pre> <p><code>bar</code> finishes first (since it slept for less), but we still halt the main thread until both have finished.</p> Tip - Lock <p>You can use <code>threading.Lock</code> to introduce synchronization into your code by only allowing threads with the Lock to operate and by waiting for the lock's release in order to start other threads.</p> Warning - Global Interpreter Lock (GIL) <p>Due to the Global Interpreter Lock (GIL) in CPython, only one thread can execute Python code at a single instance in time. This ensures thread safety to prevent multiple threads reading/writing to same piece of memory at the same time -- which can lead to unexpected behavior.</p>"},{"location":"programming/embarrasingly_parallel/#embarrassing-parallelism","title":"(Embarrassing) Parallelism","text":"<p>Multiprocessing from the Python Standard Library is similar to multithreading, but doesn't suffer the same limitations from the Python GIL. In <code>multiprocessing</code>, we are spawning separate python interpreters each with their own GIL.</p> <p>Multiprocessing is best used when you have multiple tasks to be completed that involve CPU intensive computations. The python code is nearly identical to that of <code>threading</code>.</p> CodeOutput Python<pre><code>import multiprocessing, time\n\ndef func(snooze: int):\n    print(\"Process id:\", multiprocessing.current_process().pid)\n    time.sleep(snooze)\n    return multiprocessing.current_process().pid\n\ndef main():\n    p1 = multiprocessing.Process(target=func, args=(1,)) \n    p2 = multiprocessing.Process(target=func, args=(1,)) \n\n    p1.start() # (1)!\n    p2.start()\n\n    p1.join() # (2)!\n    p2.join() \n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    main()\n    end_time = time.time()\n    print(f\"Finished in: {end_time - start_time:.2f} seconds\")\n</code></pre> <ol> <li>Starts the process.</li> <li>Waits until the process is done to continue.</li> </ol> Bash<pre><code>$ python foo.py\nProcess id: 87111\nProcess id: 87112\nFinished in: 1.06 seconds\n</code></pre> <p>Notice how a new PID is given to each process. If we have many tasks, we can use the process <code>Pool</code> to automatically start and join processes.</p> CodeOutput Python<pre><code>import multiprocessing, time\n\ndef func(snooze: int):\n    print(\"Process id:\", multiprocessing.current_process().pid)\n    time.sleep(snooze)\n\ndef main():\n    with multiprocessing.Pool() as p: # (1)!\n        p.map(func, [1, 1, 1, 1, 1])\n\nif __name__ == \"__main__\":\n    start_time = time.time()\n    main()\n    end_time = time.time()\n    print(f\"Finished in: {end_time - start_time:.2f} seconds\")\n</code></pre> <ol> <li>The <code>Pool</code> with no arguments uses the the result of <code>os.cpu_count()</code> to determine how many subprocesses can be active at any given time.</li> </ol> Bash<pre><code>$ python foo.py\nProcess id: 88179\nProcess id: 88181\nProcess id: 88180\nProcess id: 88185\nProcess id: 88187\nFinished in: 1.12 seconds\n</code></pre> Tip <p>Depending on your machine's configuration and whether you're using <code>threading</code> or <code>multiprocessing</code> or both, it may be advantageous to chunk the data you're operating on (if each subprocess is independent) and instantiate python PIDs through a bash script. You can use the argparse library to add command line arguments to a script and use a bash script like such to do this. Bash<pre><code>#!/bin/bash\n\n# Loop through years from 2013 to 2023\nfor year in {2023..2023}; do\n    # Run the Python script with the year argument in the background\n    python extract_batch.py -y $year &amp;\ndone\n# Wait for all background processes to finish\nwait\n\necho \"All extraction processes completed.\"\n</code></pre></p>"},{"location":"programming/logging/","title":"Logging","text":"<p>The logging library is part of The Python Standard Library and allows users to implement a flexible event logging system for applications and libraries. Logging is typically deployed for more complex applications that run for extended periods time. Logging allows the programmer to monitor the application during runtime and afterwards for post-mortem analysis. Credits to realpython for inspiration in some of these examples on how to use this library.</p>"},{"location":"programming/logging/#basic-usage","title":"Basic usage","text":"<p>To start using the logger, simply import logging and begin inserting logging messages into your code as such.</p> Python<pre><code>&gt;&gt;&gt; import logging\n&gt;&gt;&gt; logging.warning(\"Remain calm!\")\nWARNING:root:Remain calm!\n</code></pre> <p>How does this differ from just using print statements? In its most basic form it does not. However, in more complex programs logging provides additional functionality that simplifies event logging. </p>"},{"location":"programming/logging/#logging-levels","title":"Logging levels","text":"Log Level Function Description DEBUG <code>logging.debug()</code> Provides detailed information that\u2019s valuable to you as a developer. INFO <code>logging.info()</code> Provides general information about what\u2019s going on with your program. WARNING <code>logging.warning()</code> Indicates that there\u2019s something you should look into. ERROR <code>logging.error()</code> Alerts you to an unexpected problem that\u2019s occurred in your program. CRITICAL <code>logging.critical()</code> Tells you that a serious error has occurred and may have crashed your app. <p>The logger can be configured to different levels to choose which level of log messages you want to record. For example, setting the logging level to WARNING (the default logging level) will result in WARNING and all higher level log messages to be recorded.</p> Python<pre><code>&gt;&gt;&gt; logging.debug(\"This is a debug message\")\n\n&gt;&gt;&gt; logging.info(\"This is an info message\")\n\n&gt;&gt;&gt; logging.warning(\"This is a warning message\")\nWARNING:root:This is a warning message\n\n&gt;&gt;&gt; logging.error(\"This is an error message\")\nERROR:root:This is an error message\n\n&gt;&gt;&gt; logging.critical(\"This is a critical message\")\nCRITICAL:root:This is a critical message\n</code></pre>"},{"location":"programming/logging/#logging-configuration","title":"Logging configuration","text":"<p>The logger can be configured using the <code>logging.basicConfig</code> method. See the example below.</p> Python<pre><code># foo.py\n\nfrom datetime import datetime\nimport logging\n\ndef main():\n    logging.info(\"I'm doing some stuff\")\n    logging.error(\"Oh no! Something went wrong.\")\n\nif __name__ == \"__main__\":\n    current_datetime = datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\") # (1)\n    logging.basicConfig(filename=f\"logs/foo_{current_datetime}.log\", # (2)!\n                    filemode='w', # (3)!\n                    level=logging.DEBUG, # (4)!\n                    format='%(asctime)s - %(levelname)s - %(message)s') # (5)!\n    logging.info(\"START PROGRAM\")\n    main()\n    logging.info(\"END PROGRAM\")\n</code></pre> <ol> <li>Get the current date and time</li> <li>Configure the logger using <code>logging.basicConfig</code>. We can specify the <code>filename</code> to save the output of the logger to.</li> <li>Set the <code>filemode</code> to write.</li> <li>Set the logging level to DEBUG.</li> <li>Format the logger to include the time, level name, and then write the message.</li> </ol> <p>This will generate the output seen below. Depending on your editor, the messages will also be colored.</p> Text Only<pre><code>2024-09-19 15:18:27,397 - INFO - START PROGRAM\n2024-09-19 15:18:27,397 - INFO - I'm doing some stuff\n2024-09-19 15:18:27,397 - ERROR - Oh no! Something went wrong.\n2024-09-19 15:18:27,397 - INFO - END PROGRAM\n</code></pre> Tip - Instantiating your own logger <p>Different modules in your application can have their own loggers with different configurations. Below is an example of instantiating a logger class. Using this you can also see which module different logs are coming.</p> Python<pre><code>&gt;&gt;&gt; import logging\n&gt;&gt;&gt; logger = logging.getLogger(__name__) # (1)!\n&gt;&gt;&gt; logger.warning(\"Look at my logger!\")\nLook at my logger!\n</code></pre> <ol> <li>This will be the name of the module from which your code is in. Likely \"__main__\", at least in this case.</li> </ol> Example <p>If you don't want to use the logger or are working in different language, you can still write <code>stdout</code> (standard output) and <code>stderr</code> (standard error) to a file with the following bash code:</p> Bash<pre><code>some_command &gt; file.log 2&gt;&amp;1\n</code></pre> <ol> <li> <p><code>some_command</code>: Executes a command (which could be any valid program or script).</p> </li> <li> <p><code>&gt;file.log</code>: Redirects the standard output (stdout) of the command to a file named <code>file.log</code>. If <code>file.log</code> doesn't exist, it is created; if it exists, its contents are overwritten.</p> </li> <li> <p><code>2&gt;&amp;1</code>: Redirects the standard error (stderr) (represented by file descriptor 2) to the same location as standard output (stdout) (represented by file descriptor 1). Essentially, this ensures that both the output and errors from the command are written to <code>file.log</code>.</p> </li> </ol>"},{"location":"programming/overview/","title":"Overview","text":"<p>Computational materials science and engineering uses modeling, simulation, theory, and informatics to understand materials. The main goals include discovering new materials, determining material behavior and mechanisms, explaining experiments, and exploring materials theories. - Wikipedia</p> <p>To be a successful computational materials scientist, not only must we be proficient in the science and mathemetics behind materials, but also in computation.</p> <p>This section aims to provide brief tutorials introudcing a variety of programming paradigms and resources group members have found useful in their own research. Most of these topics will be Python orientated.</p>"},{"location":"programming/overview/#topics","title":"Topics","text":"<ul> <li>Pymatgen</li> </ul>"},{"location":"programming/pymatgen/","title":"Pymatgen","text":""},{"location":"programming/pymatgen/#overview","title":"Overview","text":"<p>Pymatgen (Python Materials Genomic) is an open-source Python library for materials analysis.<sup>1</sup></p>"},{"location":"programming/pymatgen/#installation","title":"Installation","text":"<p>First create and activate a new conda environment named \"pymatgen\" with the latest version of Python installed.</p> Bash<pre><code>conda create -n pymatgen python\nconda activate pymatgen\n</code></pre> <p>Install Pymatgen via PyPI.</p> Bash<pre><code>pip install pymatgen\n</code></pre> <ol> <li> <p>https://pymatgen.org/ \u21a9</p> </li> </ol>"},{"location":"programming/ssh/","title":"SSH","text":"<p>There are a few different ways to connect to a linux server. The most common way is to use a password. However, this is not the most secure way to connect to a server. A more secure way is to use SSH key authentication. This guide will demonstrate how to configure SSH key authentication on a linux server.</p>"},{"location":"programming/ssh/#what-is-ssh-key-authentication","title":"What is SSH key authentication?","text":"<p>SSH key authentication is a way to connect to a linux server without using a password. Password authentication can be brute-forced by powerful computers. In SSH key authentication we instead use a public and private key pair. These key pairs are cryptographically secure keys that can be used to authenticate a client to an SSH server. The private key is held by the client and should never be shared. Compromise of the private key will result in a breach. The public key is held by the server and can be shared with anyone. The public key is used to verify the client's identity. The public key is also used to encrypt messages that can only be decrypted by the private key. This is called asymmetric encryption. They public key is added to a special file within the user account that you'll be logging into called <code>~/.ssh/authorized_keys</code>. When a client attempts to authenticate using the SSH key, the server will test the client by encrypting a message with the public key. If the client can decrypt the message with the private key, the client is authenticated and a session is spawned.</p> Warning - UMich Users <p>If your host machine lies within the Universities network, you will likely need to be connected inside of that network or be able to tunnel in using a VPN prior to connection. </p>"},{"location":"programming/ssh/#creating-the-ssh-key-pair","title":"Creating the SSH key pair","text":"<p>On your local computer, generate the SSH key pair using the following command:</p> <p>Bash<pre><code>ssh-keygen\n</code></pre> By default, the keys will be stored in the <code>~/.ssh</code> directory. You will be prompted to enter a passphrase. This is an optional security measure. If you choose to use a passphrase, you will be prompted to enter it every time you use the key pair. If you do not want to use a passphrase, just press enter. The public key will be stored in <code>~/.ssh/id_rsa.pub</code> and the private key will be stored in <code>~/.ssh/id_rsa</code>. If you already have a key pair, you can choose to overwrite it. Warning You will not be able to authenticate using the previous key pair if you overwrite it. If done successfully, you should see something like this:</p> Successful public and private key pair generation."},{"location":"programming/ssh/#copying-the-ssh-public-key-to-your-server-ssh-copy-id","title":"Copying the SSH public key to your server - ssh-copy-id","text":"<p>Now that you have generated the SSH key pair, you need to copy the public key to your server. You can do this using the <code>ssh-copy-id</code> command. The syntax is as follows:</p> <p>Bash<pre><code>ssh-copy-id -p port_number username@remote_host\n</code></pre> where you would replace username, remote_host, and port_number with your own values. You will be prompted to enter your password. If done successfully, you should see something like this:</p> Successful ssh-copy-id to server."},{"location":"programming/ssh/#copying-the-ssh-public-key-to-your-server-ssh","title":"Copying the SSH public key to your server - SSH","text":"<p>If you do not have the <code>ssh-copy-id</code> command, you can copy the public key to your server using the <code>ssh</code> command. The syntax is as follows:</p> <p>Bash<pre><code>cat ~/.ssh/id_rsa.pub | ssh username@remote_host -p port_number \"mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys\"\n</code></pre> where you would replace username, remote_host, and port_number with your own values. You will be prompted to enter your password.</p>"},{"location":"programming/ssh/#authenticating-to-your-server-using-ssh-keys","title":"Authenticating to your server using SSH keys","text":"<p>Simply type the following command:</p> <p>Bash<pre><code>ssh username@remote_host -p port_number\n</code></pre> where you would replace username, remote_host, and port_number with your own values. If you did not use a passphrase, you will be logged in immediately. If you did use a passphrase, you will be prompted to enter it.</p>"},{"location":"programming/ssh/#disabling-password-authentication","title":"Disabling password authentication","text":"<p>Now that we've successfully authenticated using SSH keys, we can disable password authentication. This will prevent anyone from logging in using a password. To do this, we need to edit the <code>/etc/ssh/sshd_config</code> file on your server. Open the file using your favorite text editor. I'll be using nano:</p> <p>Bash<pre><code>sudo nano /etc/ssh/sshd_config\n</code></pre> Search for the directive called PasswordAuthentication. Uncomment it and set it to no:</p> <p>Bash<pre><code>PasswordAuthentication no\n</code></pre> Save the file and exit. Now restart the SSH service:</p> Bash<pre><code>sudo service ssh restart\n</code></pre> <p>Now if you attempt to login from a machine that does not have the SSH key pair, you will be denied access and not allowed to enter a password.</p>"},{"location":"programming/ssh/#conclusion","title":"Conclusion","text":"<p>In this tutorial we explored how to configure SSH key authentication on a linux server. We also explored how to disable password authentication. This is a more secure way to connect to a linux server. There are many other security measures you can take to protect your linux server. This guide is based off the following DigitalOcean tutorial. If you would like to read more about how to protect your linux server, you can read the following DigitalOcean tutorial.</p>"},{"location":"programming/version_control/","title":"Version Control with Github","text":"<p>Version control refers to the practice of keeping saved versions of your code separate from the version you are actively editing. This way, if you accidentally delete the file you're working on, or if you royally mess something up and can't figure out how to fix it, you can easily recover past versions of your program. Github is a terrific platform for practicing version control, plus its free and relatively user-friendly. Github also provides a convenient and navigable platform for you to make your code publically available, acting as a living breathing account of your programming repertoire. Adding your github link to your resume/CV is a great practice to easily share your programming accomplishments. </p>"},{"location":"programming/version_control/#pre-requisites-install-git-on-your-machine-and-make-a-github-account","title":"Pre-requisites: install git on your machine and make a Github account","text":"<p>First, make sure you have git installed on your machine. If not, follow the instructions here. Also, if you don't have a GitHub account, start one here. Select Join Github Education to take advantage of helpful features like Copilot. </p>"},{"location":"programming/version_control/#a-if-you-have-an-existing-directory-that-youd-like-to-store-on-a-github-repository","title":"A. If you have an existing directory that you'd like to store on a Github repository","text":"<p>If you have a well-established project which you would like to turn into a Github repository, navigate to the directory of your project and execute the following</p>"},{"location":"programming/version_control/#1-create-a-local-repository","title":"1. Create a local repository","text":"<p>navigate to the direcotry of your project</p> Bash<pre><code>    cd /Users/whsun/Documents/my/super/cool/project\n</code></pre> <p>make a .gitignore file. This is a text file which specifies which files you dont want backed up to your Github repository. This includes any data caches, folder/environment attributes, or whatever else you don't want copied to your project's Github page. </p> <p>Bash<pre><code>vim .gitignore\n</code></pre> .gitignore<pre><code>site/\n.DS_Store\n.cache\n</code></pre> OR Bash<pre><code>wget https://raw.githubusercontent.com/nrdavid/whsun-docs/refs/heads/main/.gitignore -O .gitignore\n</code></pre> Initialize a Github repository in your current project folder: Bash<pre><code>$ git init \n\nInitialized empty Git repository in /Users/whsun/Documents/my/super/cool/project\n</code></pre></p> Bash<pre><code>$ git status\n\nOn branch main\n\nUntracked files:\n\n    .gitignore\n    ...\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre> <p>Add any files in the directory to your new repo: Bash<pre><code>$ git add .\n$ git status\nOn branch main\n\nChanges to be committed:\n\n    new file:   .gitignore\n    ...\n</code></pre> commit your first changes and existing files</p> <p>Bash<pre><code>$ git commit -m \"first commit! Yay!\"\n[main (root-commit) 75dfd7a] first commit! Yay!\n 4 files changed, 6 insertions(+)\n create mode 100644 .COOL_AWESOME_FILE.txt.un~\n create mode 100644 .gitignore\n create mode 100644 COOL_AWESOME_FILE.txt\n create mode 160000 whsun-docs\n</code></pre> verify that the commit shows up in our git log, and see that the status is clean</p> <p>Bash<pre><code>$ git log\ncommit 75dfd7a0ed2c546f3f8f36a1191cf9836b0bb20d (HEAD -&gt; main)\nAuthor: Wenhao Sun &lt;whsun@umich.edu&gt;\nDate:   Thu Sep 19 11:01:23 2024 -0400\n\n    First commit! Yay!\n</code></pre> verify that the status is now clean. </p> Bash<pre><code>$ git status\nOn branch main\nnothing to commit, working tree clean\n</code></pre>"},{"location":"programming/version_control/#2-create-a-remote-repository-on-your-github-acount","title":"2. Create a remote repository on your Github acount","text":"Warning - Github collaborations <p>If you are starting a collaborative Github project, only one member should make a remote repository</p> <p>log in to Github</p> <p>Navigate to the Repositories page of your Github account. Select the green New button in the top right corner</p>  Github profile: repositories -&gt; **New**. <p>Name your repository whatever you want, select privacy settings, initialization settings, and when you're ready, select Create repository.  </p> Tip - make pages public or private <p>Maybe your program is in its very beginning stages or it contains proprietary files/info. If you don't want to make your code publically available on your page, you may choose to make your repository private. Otherwise, public repositories are great for putting your work out into the world. </p> Tip - initialize with a README file <p>If you are publishing a program that you want the community to use/learn from, it is good practice to intiialize with a README file which lets you provide a long description and/or tutorial for your program. </p>  Setting up your new project. <p>You should be automatically taken to the homepage for your new repository. Note that the contents of the README file display on the repository home page. Now, we need to connect our remote repository to the local repository we made earlier, and push all our existing files to the remote repository. </p>  new repository: home page. <p>Select the &lt;&gt; Code button, and copy the HTTPS web URL for your remote Github repository </p>  copy the HTTPS link."},{"location":"programming/version_control/#3-link-your-local-repository-to-your-remote-repository","title":"3. Link your local repository to your remote repository","text":"<p>Now, link your local repository to remote repository on Github. On your local machine (make sure you are still in your project directory!!), run the following: Bash<pre><code>$ pwd\n/Users/whsun/Documents/my/super/cool/project/\n$ git remote add origin https://github.com/jamesgil54/coolest_project.git  # use your copied URL\n</code></pre></p> Tip - make sure your local repository is connected to the remote repository Bash<pre><code>$ git remote -v \norigin  https://github.com/jamesgil54/coolest_project.git (fetch)\norigin  https://github.com/jamesgil54/coolest_project.git (push)\n</code></pre> <p>Now, we are going to 'push' our changes to the remote repository, officially sending them and merging them with the files on the remote Github page. </p> Bash<pre><code>$ git push -u origin main\n</code></pre> Warning - pre-existing files in your local repo <p>if you initialized your repo with a README file, your push may get rejected due to your remote repo having files which aren't tracked in your local repo. If this occurs, simply run: Bash<pre><code>$ vim README.md # make a placeholder README file\n$ git pull origin main --allow-unrelated-histories\n\nFrom https://github.com/jamesgil54/coolest_project\n* branch            main       -&gt; FETCH_HEAD\nAuto-merging README.md\nCONFLICT (add/add): Merge conflict in README.md\nAutomatic merge failed; fix conflicts and then commit the result.\n\n$ git mergetool # a GUI that helps you resolve merge conflicts - choose to save the changes from your remote repo. \n\nCurrent branch main is up to date.\n\n$ git pull origin main\n$ git push -u origin main # try pushing again\n\nEnumerating objects: 18, done.\nCounting objects: 100% (18/18), done.\nDelta compression using up to 32 threads\nCompressing objects: 100% (12/12), done.\nWriting objects: 100% (16/16), 1.53 KiB | 1.53 MiB/s, done.\nTotal 16 (delta 5), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (5/5), done.\nTo https://github.com/jamesgil54/coolest_project.git\n02f9ba2..36926d8  main -&gt; main\nbranch 'main' set up to track 'origin/main'.\n</code></pre></p> Warning - default branch name master <p>Sometimes your local repo can initialize with the name <code>master</code> instead of <code>main</code>. If this is the case, you may change your local branch name by running Text Only<pre><code>$ git branch\n* master # prints out your local repo branch name\n$ git branch -M main\n$ git branch\n* main\n</code></pre> before pushing</p> <p>Now, if you go back to your Github repository homepage, you should see your most recent changes and all your new files, as well as all the commits made with their corresponding messages. </p>  Remote repository homepage with all your files updated"},{"location":"programming/version_control/#b-to-start-a-new-project-directly-from-a-github-repository-or-edit-existing-published-code","title":"B. To start a new project directly from a Github repository, or edit existing, published code","text":"<p>If you are starting a project from scratch, want to collaborate on a project with someone who has an existing repository, or if you'd like to make changes to source code published on github for your own personal use, you will need to clone a github repository. This process is actually quite a bit simpler than uploading an existing local directory to a new remote repository. </p>"},{"location":"programming/version_control/#1-navigate-to-the-desired-directory-on-your-local-machine-where-youd-like-to-host-your-new-project","title":"1. Navigate to the desired directory on your local machine where you'd like to host your new project","text":"Bash<pre><code>cd /Users/whsun/my/new/flashy/project/space\n</code></pre>"},{"location":"programming/version_control/#2-copy-the-https-link-from-the-desired-repository-homepage","title":"2. Copy the HTTPS link from the desired repository homepage","text":"<p>As with before, you'll need to copy the HTTPS from the repository homepage which you want to clone. </p> Hint - new projects <p>If you are starting a project from scratch, make sure you make a new repository on your Github account, and copy the link from there. </p> Hint - collaborative projects <p>If you are hoping to contribute to a collaborative github page, you will want to 'fork' your own copy of the repository, which will open an identical repository under your profile. Forking from the original branch may make merging your changes easier later on   Make your own copy of the repository to facilitate merging your changes later on!  </p> Warning - be sure to copy the correct link <p>If you forked your own repository copy, be sure you clone YOUR repository, not the original owners'. You will not be able to merge your changes to the original repository. </p>  Repository that you want to connect to your machine"},{"location":"programming/version_control/#3-clone-the-github-repository-to-your-project-directory","title":"3. Clone the github repository to your project directory","text":"<p>In your project directory, run:</p> <p>Bash<pre><code>$ git clone https://github.com/nrdavid/whsun-docs.git\n</code></pre> And you're all set! When you clone a remote repository, git will automatically build a local repository which is linked to your remote repo. </p>"},{"location":"programming/version_control/#update-your-remote-repository-as-you-make-changes","title":"Update your remote repository as you make changes","text":"<p>Now that you have your remote and local repositories all set up, you can update your remote repository as you make changes to your local files like so:</p> Bash<pre><code>$ git add .\n$ git commit -m \"Just made some super rad changes. you're gonna love em.\"\n$ git push -u origin &lt;branchname&gt; \\ # (1)!\n</code></pre> <ol> <li>if you keep default settings, branchname should just be \"main\"</li> </ol> Tip - add only specific files to your next commit <p><code>git add .</code> adds every file in your current directory to the next commit. If you want to only commit changes to particular files, simply specify the filename: Bash<pre><code>git add ./my_lovely_file.txt\n</code></pre></p>"},{"location":"programming/vscode/","title":"VS Code","text":"<p>VS Code can be an extremely powerful IDE when you utilize its many features. Here's a list of features you may find useful in your programming endeavors! </p>"},{"location":"programming/vscode/#debug-tool","title":"Debug Tool","text":""},{"location":"programming/vscode/#setting-up-the-python-debugger","title":"Setting up the Python Debugger","text":"<p>While print statements can usually get you pretty far to debug your program, the VS code debugger can transform how you debug, and can help you learn about unfamiliar python objects with a convenient GUI. The Python Debugger Extension should already be installed when you install the Python extension, but you can verify this by searching for it in your extensions. To run your python file using the debugger, select the drop down menu next to the 'play' icon in the upper left-hand corner. Navigate to the dropdown item Python Debugger: Debug Python File. You can also select the 'run and debug' icon in the taskbar to the left, or, as a shortcut, you can press F5</p> Running the VScode debugger. <p>if it is your first time running the debugger, you will need to configure the debugger using a launch.json file. VS Code can run many programming languages, and each language requires its own debugger program - debug configurations let you tell VScode what type of debug program you are running, and lets you customize debug features. When you run the debugger for the first time, you should get a popup in the left side of the screen to select a debug configuration. To create a new debugger configuration, click create a launch.json file</p>  configure the debugger: create a launch.json file . <p>You will then be prompted to select a debugging program. For each coding language, there is typically a unique debugging extension. Since you should already have the Python Debugger Extension, you should see a Python Debugger option in the dropdown menu. </p>  Choose the python debugger as your debug program . <p>Once you select the Python Debugger, you will then be prompted to choose a Debug Configuration. Select Python File, which creates a launch.json configured to debug the python file you are currently editing. </p>  Choose \"Python File\" for the debug configuration . <p>VS Code will then automatically generate a <code>./vscode</code> directory in your current working directory, and place the <code>launch.json</code> file there. It should also automatically open this file when you create it. </p>  launch.json location: automatically saved to ./.vscode . <p>Your launch.json will contain all the default options for the python debugger configuration</p>  deafult launch.json text ."},{"location":"programming/vscode/#default-parameters","title":"Default parameters","text":"<ul> <li><code>name</code> specifies the name of the debug configuration</li> <li><code>type</code> specifies the debug program/extension which will be run - <code>\"debugpy\"</code> is the name for the Python Debugger </li> <li><code>request</code> specified how the debugger will be run, <code>\"launch\"</code> tells VS code to start the debugger on the desired file. The other option is <code>\"attach\"</code>, which lets you start the debugger on a process which is already running. </li> <li><code>program</code> lets you customize which program is run upon starting the debugger. The default <code>\"${file}\"</code> means \"run on the currently open file\", but if you wanted to always run a specific program on a single configuration, you might change this to the file path of your python file. </li> <li><code>console</code> specifies where output from the debug program should be printed. <code>\"integratedTerminal\"</code> sends output to the VS Code Integrated Terminal. </li> </ul> <p>The default debugger configuration is very sufficient. However, there are some fun features that you may add if needed:</p>"},{"location":"programming/vscode/#additional-useful-parameters","title":"Additional useful parameters","text":"<ul> <li><code>subProcess</code>: this parameter defaults to false, but I absolutely recommend that you default it to true. setting <code>\"subProcess\": true</code> lets you do subprocess debugging. This means you can 'step into' functions that are called in your program, but written in a separate file, letting you debug between python files all at once. </li> <li><code>stopOnEntry</code>: this feature, when set to true, means that the debugger will 'break' on the first line of your code. Otherwise, it will only break on user-specified breakpoints (which is often preferable)</li> <li><code>python</code>: setting this parameter lets you specify the python interpreter that your debugger will use. Most of the time, you will just want to run your debugger on the same interpreter as your program (i.e. don't specify this parameter), but if you wanted to test your code on different versions of a package (in different environments), this feature may be useful to you.</li> <li><code>autoReload</code>: enabling this feature allows you to edit code after breakpoints while the debugger is running, and the code updates will automatically be reloaded into the currently-running file. Include the following as a parameter in launch.json to enable autoReload     Text Only<pre><code>\"autoReload\": {\n    \"enable\": true\n}\n</code></pre> You can learn about other customizable debug parameters here</li> </ul>"},{"location":"programming/vscode/#adding-multiple-debugger-configurations","title":"Adding multiple debugger configurations","text":"<p>you may want to have multiple debug configurations for different files, especially if you are working with multiple languages in the same directory. If this is the case, you can either manually add a configuration to your launch.json, or you may click Add Configuration... at the bottom right corner of the launch.json window. </p>  add a new configuration to your launch.json . <p>Follow the prompts to add another debug configuration of your choosing, and VS code should populate another configuration to your existing list:</p>  launch.json location: automatically saved to ./.vscode . <p>You can easily select between debug configurations in the debug console, like so. Note that the name of each unique configuration shows up in the selection options</p>  launch.json location: automatically saved to ./.vscode ."},{"location":"programming/vscode/#running-the-python-debugger","title":"Running the Python Debugger","text":"<p>To start debugging a program, you may set 'break points' at specific lines of your program, usually just before your encounter an error in your code. At breakpoints, the program will stop and you will have the option to step through the code line-by-line and analyze current variables on the fly. Set breakpoints by clicking to the right of the line number which you want the program to stop at. A red circle should show up, indicating that this line now has a breakpoint. </p>  set breakpoints by clicking next to the desired line number. <p>Now, when you run the python debugger, the program will 'break' at the breakpoint you selected, and a control panel will pop up in the upper right corner. The debug console should open automatically and display all active variables.</p>  debugger features: console shows all local/global variables and functions, control panel lets you move through code.  debug control panel. <p>The debugger console, from left to right, has the following features:</p> <ul> <li>continue: continue running code until the next breakpoint</li> <li>step over: go to the next line in the code. If this line is a function call, simply move to the next line in the home program</li> <li>step into: If the line you are on is a function call, go to the next line \"inside\" that function. This feature is incredibly useful for debugging your helper functions</li> <li>step out: If you are inside a function, go back to the original function call </li> <li>restart: restart the program/debug session</li> <li>stop: stop the debug session, stop the program. </li> </ul> Tip - test individual snippets of code <p>If you want to run small sections of code instead of the whole program, you can do so by selecting the lines you want to run, and pressing Shift + Enter, or by right clicking and selecting Run Selection/Line in Python Terminal</p>"},{"location":"programming/vscode/#programming-on-remote-hosts-hpcs-remote-desktop-etc","title":"Programming on Remote Hosts (HPCs, remote desktop, etc.)","text":""},{"location":"programming/vscode/#ai-copilot","title":"AI Copilot","text":""}]}